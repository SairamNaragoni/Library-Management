/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JCheckBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sairam
 */
public class profile extends javax.swing.JPanel {

    private final gVar g;

    /**
     * Creates new form profile
     * @throws java.sql.SQLException
     */
    public profile(gVar g) throws SQLException {
        this.g = g;
        initComponents();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        issued_books = new javax.swing.JTable();

        setBackground(new java.awt.Color(1, 27, 29));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        issued_books.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B_Id", "Issue_Date", "Due_Date", "Fine", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(issued_books);
        issued_books.setRowHeight(35);
        if (issued_books.getColumnModel().getColumnCount() > 0) {
            issued_books.getColumnModel().getColumn(0).setMinWidth(40);
            issued_books.getColumnModel().getColumn(0).setPreferredWidth(40);
            issued_books.getColumnModel().getColumn(0).setMaxWidth(40);
            issued_books.getColumnModel().getColumn(1).setMinWidth(90);
            issued_books.getColumnModel().getColumn(2).setMinWidth(90);
            issued_books.getColumnModel().getColumn(3).setMinWidth(40);
            issued_books.getColumnModel().getColumn(3).setPreferredWidth(40);
            issued_books.getColumnModel().getColumn(3).setMaxWidth(40);
            issued_books.getColumnModel().getColumn(4).setMinWidth(120);
        }
        issued_books.getColumn("Action").setCellRenderer(new ButtonRenderer("profile",g));
        issued_books.getColumn("Action").setCellEditor(new ButtonEditor(g,new JCheckBox(),"profile",null,this));
        setSize( 400, 100 );
        setVisible(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable issued_books;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public void updateTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) issued_books.getModel();
        model.setRowCount(0);
        dbConn db = new dbConn();
        int S_id = g.user_id;
        Statement stmt = db.conn.createStatement();
        ResultSet rs=stmt.executeQuery("select B_id,issue_date,due_date,fine from issued_books where S_id ='"+S_id+"'");
        int columns = rs.getMetaData().getColumnCount();
        while(rs.next())
        {  
            Object[] row = new Object[columns];
            for (int i = 1; i <= columns; i++)
            {  
                row[i - 1] = rs.getObject(i);
            }
            model.insertRow(rs.getRow()-1,row);
            /*
            Statement stt = db.conn.createStatement();
            ResultSet ro = stt.executeQuery("select DATEDIFF(due_date,issue_date) from issued_books where B_id ='"+row[0]+"' and S_id ='"+S_id+"'");
            ro.next();
            int fine = Integer.parseInt(ro.getString(1)) - 15;
            //System.out.println(ro.getString(1));
            if(fine<0)
                fine=0;
            PreparedStatement pStmt = db.conn.prepareStatement("UPDATE issued_books SET fine = '"+fine+"' where B_id ='"+row[0]+"' and S_id ='"+S_id+"'");
            pStmt.execute();*/
        }

    }
}
